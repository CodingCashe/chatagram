// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId      String         @unique
  email        String         @unique
  firstname    String?        @unique
  lastname     String?        @unique
  createdAt    DateTime       @default(now())
  subscription Subscription?
  integrations Integrations[]
  automations  Automation[]
  businesses   Business[]
  marketingInfo MarketingInfo[]
}

model MarketingInfo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String?
  phone     String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
}



model Business {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessName        String
  businessType        String
  businessDescription String
  industry            String
  instagramHandle     String
  welcomeMessage      String
  responseLanguage    String
  businessHours       String
  autoReplyEnabled    Boolean
  promotionMessage    String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  User                User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String?  @db.Uuid
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

model Integrations {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           INTEGRATIONS @default(INSTAGRAM)
  createdAt      DateTime     @default(now())
  User           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?      @db.Uuid
  token          String       @unique
  expiresAt      DateTime?
  instagramId    String?      @unique
  username       String?
  fullName       String?
  profilePicture String?
  followersCount Int?
  followingCount Int?
  postsCount     Int?
  lastUpdated    DateTime @default(now())
}



model Automation {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @default("Untitled")
  createdAt DateTime  @default(now())
  active    Boolean   @default(false)
  trigger   Trigger[]
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  messages  Message[]
  conversations Conversation[]
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.Uuid
  keywords  Keyword[]
}

model Message {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String
  senderId     String
  message      String
  isFromBot    Boolean
  createdAt    DateTime    @default(now())
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?      @db.Uuid
}



// Add this new model to your existing schema
model Conversation {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String    @unique
  messages     Json[]    // This will store an array of message objects
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?    @db.Uuid
}

// Keep your existing Message model as it is



model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model ConversationState {
  id        String   @id @default(cuid())
  userId    String   @unique
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listener {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.Uuid
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  lastComment  String?  
  lastDm       String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word]) //this constraints ensure user cant use the same keyword on multiple automations
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}

