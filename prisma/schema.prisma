// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId          String             @unique
  email            String             @unique
  firstname        String?            @unique
  lastname         String?            @unique
  isAdmin          Boolean            @default(false)
  createdAt        DateTime           @default(now())
  subscription     Subscription?
  integrations     Integrations[]
  automations      Automation[]
  businesses       Business[]
  marketingInfo    MarketingInfo[]
  scheduledContent ScheduledContent[]
  auditLogs        AuditLog[]
  sentMessages     ChatMessage[]      @relation("SentMessages")
  receivedMessages ChatMessage[]      @relation("ReceivedMessages")
  notifications    UserNotification[]
}

model ScheduledContent {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instagramPostId  String?     @unique
  caption          String
  mediaType        String
  mediaUrl         String
  thumbnailUrl     String?
  permalink        String?
  scheduledDate    DateTime
  publishedDate    DateTime?
  mediaProductType String?
  automation       Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String?     @db.Uuid
  status           String      @default("scheduled")
  User             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?     @db.Uuid
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model MarketingInfo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String?
  phone     String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
}

model Business {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String?
  businessName              String
  businessType              String
  businessDescription       String
  industry                  String
  automationSetupComplete   Boolean   @default(false)
  automationSetupDate       DateTime?
  automationAdditionalNotes String?
  automationGoals           Json?
  customerJourney           Json?
  features                  Json?
  businessTypeData          Json?
  websiteAnalysis           Json?
  targetAudience            String
  website                   String
  instagramHandle           String
  whatsappNumber            String?   // Added for WhatsApp
  pinterestHandle           String?   // Added for Pinterest
  twitterHandle             String?   // Added for Twitter
  facebookPageId            String?   // Added for Facebook
  linkedinProfileId         String?   // Added for LinkedIn
  tiktokHandle              String?   // Added for TikTok
  welcomeMessage            String
  responseLanguage          String
  businessHours             String
  autoReplyEnabled          Boolean
  promotionMessage          String
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  User                      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String?   @db.Uuid
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

model Integrations {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           INTEGRATIONS @default(INSTAGRAM)
  createdAt      DateTime     @default(now())
  User           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?      @db.Uuid
  token          String       @unique
  expiresAt      DateTime?    
  
  // Instagram-specific fields
  instagramId    String?      @unique
  username       String?
  fullName       String?
  profilePicture String?
  followersCount Int?
  followingCount Int?
  postsCount     Int?
  
  // WhatsApp-specific fields
  phoneNumberId  String?      @unique
  phoneNumber    String?
  
  // Facebook-specific fields
  pageId         String?      @unique
  pageName       String?
  
  // Pinterest-specific fields
  pinterestId    String?      @unique
  boardCount     Int?
  
  // Twitter-specific fields
  twitterId      String?      @unique
  tweetCount     Int?
  
  // LinkedIn-specific fields
  linkedinId     String?      @unique
  
  // TikTok-specific fields
  tiktokId       String?      @unique
  
  lastUpdated    DateTime     @default(now())
}

model Automation {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String             @default("New Automation")
  createdAt      DateTime           @default(now())
  active         Boolean            @default(false)
  platform       INTEGRATIONS       @default(INSTAGRAM) // Added to specify which platform this automation is for
  trigger        Trigger[]
  listener       Listener?
  posts          Post[]
  dms            Dms[]
  messages       Message[]
  conversations  Conversation[]
  User           User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?            @db.Uuid
  keywords       Keyword[]
  scheduledPosts ScheduledContent[]
}

model Message {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String
  senderId     String
  message      String
  isFromBot    Boolean
  createdAt    DateTime    @default(now())
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Conversation {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String      @unique
  messages     Json[] // This will store an array of message objects
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model ConversationState {
  id        String   @id @default(cuid())
  userId    String   @unique
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listener {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.Uuid
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  lastComment  String?
  lastDm       String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word]) //this constraints ensure user cant use the same keyword on multiple automations
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
  WHATSAPP
  FACEBOOK
  PINTEREST
  TWITTER
  LINKEDIN
  TIKTOK
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  message   String
  type      String   // "user", "subscription", "automation", "system", etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  action     String
  target     String
  details    String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
}

model Incident {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  severity    String    // "low", "medium", "high", "critical"
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
}



// Additional models for chat and real-time notifications

model ChatMessage {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  senderId    String   @db.Uuid
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String?  @db.Uuid
  receiver    User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  isFromAdmin Boolean  @default(false)
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


// Enhanced notification system
model UserNotification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      String   // "chat", "automation", "subscription", etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

