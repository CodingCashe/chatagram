// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId          String             @unique
  email            String             @unique
  firstname        String?            @unique
  lastname         String?            @unique
  createdAt        DateTime           @default(now())
  subscription     Subscription?
  integrations     Integrations[]
  automations      Automation[]
  businesses       Business[]
  marketingInfo    MarketingInfo[]
  scheduledContent ScheduledContent[]
}

model ScheduledContent {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instagramPostId   String?     @unique
  facebookPostId    String?     // Added for Facebook posts
  caption           String
  mediaType         String
  mediaUrl          String
  thumbnailUrl      String?
  permalink         String?
  scheduledDate     DateTime
  publishedDate     DateTime?
  mediaProductType  String?
  automation        Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId      String?     @db.Uuid
  status            String      @default("scheduled")
  User              User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?     @db.Uuid
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  integration       Integrations? @relation(fields: [integrationId], references: [id]) // Link to specific integration
  integrationId     String?     @db.Uuid
}

model MarketingInfo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String?
  phone     String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
}

model Business {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String?
  businessName             String
  businessType             String
  businessDescription      String
  industry                 String
  automationSetupComplete  Boolean   @default(false)
  automationSetupDate      DateTime?
  automationAdditionalNotes String?
  automationGoals          Json?
  customerJourney          Json?
  features                 Json?
  businessTypeData         Json?
  websiteAnalysis          Json?
  targetAudience           String
  website                  String
  instagramHandle          String?   // Made optional
  facebookHandle           String?   // Added for Facebook
  whatsappNumber           String?   // Added for WhatsApp
  welcomeMessage           String
  responseLanguage         String
  businessHours            String
  autoReplyEnabled         Boolean
  promotionMessage         String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  User                     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String?   @db.Uuid
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

model Integrations {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           INTEGRATIONS @default(INSTAGRAM)
  createdAt      DateTime     @default(now())
  User           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?      @db.Uuid
  token          String       // Removed @unique to allow multiple accounts
  expiresAt      DateTime?
  
  // Common fields
  accountId      String       @default("123456")// Platform-specific ID (Instagram ID, Facebook Page ID, WhatsApp Phone Number ID)
  username       String?
  fullName       String?
  profilePicture String?
  followersCount Int?
  followingCount Int?
  postsCount     Int?
  lastUpdated    DateTime     @default(now())
  
  // Instagram-specific fields
  instagramId    String?      // Kept for backward compatibility
  
  // Facebook-specific fields
  pageId         String?      // For Facebook Pages
  pageAccessToken String?     // For Facebook Pages
  
  // WhatsApp-specific fields
  phoneNumber    String?      // For WhatsApp Business
  
  // Scheduled content for this integration
  scheduledContent ScheduledContent[]
  
  // Make the combination of userId, name, and accountId unique
  // This allows a user to have multiple accounts for each platform
  @@unique([userId, name, accountId])
}

model Automation {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @default("New Automation")
  createdAt       DateTime          @default(now())
  active          Boolean           @default(false)
  trigger         Trigger[]
  listener        Listener?
  posts           Post[]
  dms             Dms[]
  messages        Message[]
  conversations   Conversation[]
  User            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?           @db.Uuid
  keywords        Keyword[]
  scheduledPosts  ScheduledContent[]
  platform        INTEGRATIONS      @default(INSTAGRAM) // Added to specify which platform this automation is for
}

model Message {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String
  senderId     String
  message      String
  isFromBot    Boolean
  createdAt    DateTime    @default(now())
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  platform     INTEGRATIONS @default(INSTAGRAM) // Added to specify which platform this message is from
}

model Conversation {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String      @unique
  messages     Json[]      // This will store an array of message objects
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  platform     INTEGRATIONS @default(INSTAGRAM) // Added to specify which platform this conversation is from
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
  platform     INTEGRATIONS @default(INSTAGRAM) // Added to specify which platform this DM is from
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  platform     INTEGRATIONS @default(INSTAGRAM) // Added to specify which platform this post is from
}

model ConversationState {
  id        String   @id @default(cuid())
  userId    String   @unique
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listener {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.Uuid
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  lastComment  String?  
  lastDm       String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
  platform     INTEGRATIONS @default(INSTAGRAM) // Added to specify which platform this listener is for
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  platform     INTEGRATIONS @default(INSTAGRAM) // Added to specify which platform this trigger is for
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word]) //this constraints ensure user cant use the same keyword on multiple automations
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
  FACEBOOK
  WHATSAPP
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}