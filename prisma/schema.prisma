// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId          String             @unique
  email            String             @unique
  firstname        String?            @unique
  lastname         String?            @unique
  isAdmin          Boolean            @default(false)
  createdAt        DateTime           @default(now())
  subscription     Subscription?
  integrations     Integrations[]
  automations      Automation[]
  businesses       Business[]
  marketingInfo    MarketingInfo[]
  scheduledContent ScheduledContent[]
  auditLogs        AuditLog[]
  sentMessages     ChatMessage[]      @relation("SentMessages")
  receivedMessages ChatMessage[]      @relation("ReceivedMessages")
  notifications    UserNotification[]
  emails           Email[]
  uploadedAttachments  ChatAttachment[]   @relation("UploadedAttachments")
  receivedAttachments  ChatAttachment[]   @relation("ReceivedAttachments")
  invoices             Invoice[]          @relation("UserInvoices")
  payments             Payment[]          @relation("UserPayments")
  referralCodes        ReferralCode[]     @relation("UserReferralCodes")
  referrals            Referral[]         @relation("UserReferrals")
  referredBy           Referral[]         @relation("ReferredUsers")
  commissionPayouts    CommissionPayout[] @relation("UserCommissionPayouts")
  referredByCode       String?
  affiliate            AffiliateUser?
  affiliateReferrals   AffiliateReferral[] @relation("referredUser")
  whatsAppBusinesses   WhatsAppBusiness[]
  whatsAppRules        WhatsAppRule[]
  whatsAppTemplates    WhatsAppTemplate[]
}

model ScheduledContent {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instagramPostId  String?     @unique
  caption          String
  mediaType        String
  mediaUrl         String
  thumbnailUrl     String?
  permalink        String?
  scheduledDate    DateTime
  publishedDate    DateTime?
  mediaProductType String?
  automation       Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String?     @db.Uuid
  status           String      @default("scheduled")
  User             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?     @db.Uuid
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model MarketingInfo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String?
  phone     String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
}

model Business {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String?
  businessName              String
  businessType              String
  businessDescription       String
  industry                  String
  automationSetupComplete   Boolean   @default(false)
  automationSetupDate       DateTime?
  automationAdditionalNotes String?
  automationGoals           Json?
  customerJourney           Json?
  features                  Json?
  businessTypeData          Json?
  websiteAnalysis           Json?
  targetAudience            String
  website                   String
  instagramHandle           String
  whatsappNumber            String?   // Added for WhatsApp
  pinterestHandle           String?   // Added for Pinterest
  twitterHandle             String?   // Added for Twitter
  facebookPageId            String?   // Added for Facebook
  linkedinProfileId         String?   // Added for LinkedIn
  tiktokHandle              String?   // Added for TikTok
  welcomeMessage            String
  responseLanguage          String
  businessHours             String
  autoReplyEnabled          Boolean
  promotionMessage          String
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  User                      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String?   @db.Uuid
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

model Integrations {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           INTEGRATIONS @default(INSTAGRAM)
  createdAt      DateTime     @default(now())
  User           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?      @db.Uuid
  token          String       @unique
  expiresAt      DateTime?    
  
  // Instagram-specific fields
  instagramId    String?      @unique
  username       String?
  fullName       String?
  profilePicture String?
  followersCount Int?
  followingCount Int?
  postsCount     Int?
  
  // WhatsApp-specific fields
  phoneNumberId  String?      @unique
  phoneNumber    String?
  
  // Facebook-specific fields
  pageId         String?      @unique
  pageName       String?
  
  // Pinterest-specific fields
  pinterestId    String?      @unique
  boardCount     Int?
  
  // Twitter-specific fields
  twitterId      String?      @unique
  tweetCount     Int?
  
  // LinkedIn-specific fields
  linkedinId     String?      @unique
  
  // TikTok-specific fields
  tiktokId       String?      @unique
  
  lastUpdated    DateTime     @default(now())
}

model Automation {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String             @default("New Automation")
  createdAt      DateTime           @default(now())
  active         Boolean            @default(false)
  platform       INTEGRATIONS       @default(INSTAGRAM) // Added to specify which platform this automation is for
  trigger        Trigger[]
  listener       Listener?
  posts          Post[]
  dms            Dms[]
  messages       Message[]
  conversations  Conversation[]
  User           User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?            @db.Uuid
  keywords       Keyword[]
  scheduledPosts ScheduledContent[]
}

model Message {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String
  senderId     String
  message      String
  isFromBot    Boolean
  createdAt    DateTime    @default(now())
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Conversation {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String      @unique
  messages     Json[] // This will store an array of message objects
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model ConversationState {
  id        String   @id @default(cuid())
  userId    String   @unique
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listener {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.Uuid
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  lastComment  String?
  lastDm       String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word]) //this constraints ensure user cant use the same keyword on multiple automations
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
  WHATSAPP
  FACEBOOK
  PINTEREST
  TWITTER
  LINKEDIN
  TIKTOK
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  message   String
  type      String   // "user", "subscription", "automation", "system", etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  action     String
  target     String
  details    String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
}

model Incident {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  severity    String    // "low", "medium", "high", "critical"
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
}


model ChatMessage {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  senderId    String   @db.Uuid
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String?  @db.Uuid
  receiver    User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  isFromAdmin Boolean  @default(false)
  isPending   Boolean  @default(false)
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



// Enhanced notification system
model UserNotification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      String   // "chat", "automation", "subscription", etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessageTemplate {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  content     String
  category    String?
  tags        String[]
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model EmailTemplate {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  subject     String
  content     String         @db.Text
  description String?
  category    String         @default("general")
  isDefault   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  emails      Email[]
  campaigns   EmailCampaign[]
}

model Email {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject      String
  content      String        @db.Text
  recipientId  String        @db.Uuid
  recipient    User          @relation(fields: [recipientId], references: [id])
  templateId   String?       @db.Uuid
  template     EmailTemplate? @relation(fields: [templateId], references: [id])
  campaignId   String?       @db.Uuid
  campaign     EmailCampaign? @relation(fields: [campaignId], references: [id])
  status       EmailStatus   @default(SCHEDULED)
  scheduledFor DateTime?
  sentAt       DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}


model EmailCampaign {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  templateId  String        @db.Uuid
  template    EmailTemplate @relation(fields: [templateId], references: [id])
  status      CampaignStatus @default(DRAFT)
  scheduledFor DateTime?
  sentAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  emails      Email[]
}


enum EmailStatus {
  SCHEDULED
  SENT
  FAILED
  OPENED
  CLICKED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  CANCELLED
}


model ChatAttachment {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filename    String
  filePath    String
  fileType    String
  fileSize    Int
  uploadedBy  String    @db.Uuid
  uploader    User      @relation("UploadedAttachments", fields: [uploadedBy], references: [id])
  receiverId  String?   @db.Uuid
  receiver    User?     @relation("ReceivedAttachments", fields: [receiverId], references: [id])
  createdAt   DateTime  @default(now())
}


model Invoice {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceNumber   String          @unique
  userId          String          @db.Uuid
  user            User            @relation("UserInvoices", fields: [userId], references: [id])
  amount          Float
  tax             Float           @default(0)
  total           Float
  currency        String          @default("USD")
  status          InvoiceStatus   @default(DRAFT)
  dueDate         DateTime
  issueDate       DateTime        @default(now())
  paidDate        DateTime?
  notes           String?
  items           InvoiceItem[]
  payments        Payment[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model InvoiceItem {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceId   String    @db.Uuid
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Int
  unitPrice   Float
  amount      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payment {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceId       String        @db.Uuid
  invoice         Invoice       @relation(fields: [invoiceId], references: [id])
  userId          String        @db.Uuid
  user            User          @relation("UserPayments", fields: [userId], references: [id])
  amount          Float
  currency        String        @default("USD")
  paymentMethod   PaymentMethod
  transactionId   String?
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime      @default(now())
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}


model ReferralProgram {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  commissionType    CommissionType      @default(PERCENTAGE)
  commissionValue   Float               // Percentage or fixed amount
  minimumPayout     Float               @default(0)
  active            Boolean             @default(true)
  referralCodes     ReferralCode[]
  referrals         Referral[]
  commissionPayouts CommissionPayout[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ReferralCode {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code              String          @unique
  userId            String          @db.Uuid
  user              User            @relation("UserReferralCodes", fields: [userId], references: [id])
  programId         String          @db.Uuid
  program           ReferralProgram @relation(fields: [programId], references: [id])
  active            Boolean         @default(true)
  referrals         Referral[]      @relation("ReferralsByCode")
  clicks            Int             @default(0)
  conversions       Int             @default(0)
  conversionRate    Float?          // Calculated field
  totalCommission   Float           @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Referral {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referrerId        String          @db.Uuid
  referrer          User            @relation("UserReferrals", fields: [referrerId], references: [id])
  referredUserId    String?         @db.Uuid
  referredUser      User?           @relation("ReferredUsers", fields: [referredUserId], references: [id])
  referralCodeId    String          @db.Uuid
  referralCode      ReferralCode    @relation("ReferralsByCode", fields: [referralCodeId], references: [id])
  programId         String          @db.Uuid
  program           ReferralProgram @relation(fields: [programId], references: [id])
  status            ReferralStatus  @default(PENDING)
  commissionAmount  Float?
  commissionPaid    Boolean         @default(false)
  commissionPayoutId String?        @db.Uuid
  commissionPayout  CommissionPayout? @relation(fields: [commissionPayoutId], references: [id])
  conversionDate    DateTime?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model CommissionPayout {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String          @db.Uuid
  user              User            @relation("UserCommissionPayouts", fields: [userId], references: [id])
  programId         String          @db.Uuid
  program           ReferralProgram @relation(fields: [programId], references: [id])
  amount            Float
  status            PayoutStatus    @default(PENDING)
  paymentMethod     PaymentMethod   @default(BANK_TRANSFER)
  paymentDetails    Json?
  referrals         Referral[]
  processedDate     DateTime?
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model ReferralClick {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referralCodeId    String          @db.Uuid
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime        @default(now())
}

enum CommissionType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ReferralStatus {
  PENDING
  CONVERTED
  EXPIRED
  REJECTED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}


// New Affiliate Program model
model AffiliateProgram {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  commissionRate    Float    // Percentage
  cookieDuration    Int      // Days
  minimumPayout     Float    @default(50)
  status            String   @default("active") // active, paused, inactive
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  termsAndConditions String?
  
  // Relations
  affiliates        AffiliateUser[]
  referrals         AffiliateReferral[]
  payouts           AffiliatePayout[]
}

// Model for both registered users and external affiliates
model AffiliateUser {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String?  @unique @db.Uuid  // Added @unique and @db.Uuid
  name              String
  email             String   @unique
  isApproved        Boolean  @default(false)
  status            String   @default("pending") // pending, active, suspended
  commissionRate    Float?   // Custom rate (overrides program default if set)
  balance           Float    @default(0)
  totalEarned       Float    @default(0)
  referralCode      String   @unique
  bio               String?
  paymentDetails    Json?    // Payment method details (PayPal email, bank info, etc.)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  program           AffiliateProgram @relation(fields: [programId], references: [id])
  programId         String   @db.Uuid  // Added @db.Uuid
  referrals         AffiliateReferral[]
  clicks            AffiliateClick[]
  payouts           AffiliatePayout[]
}

model AffiliateReferral {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referredUserId    String?  @db.Uuid  // Added @db.Uuid
  conversionType    String   // registration, subscription, purchase, etc.
  amount            Float    // Amount of the transaction that generated the commission
  commissionAmount  Float    // Actual commission amount
  status            String   @default("pending") // pending, approved, rejected, paid
  conversionDate    DateTime @default(now())
  notes             String?
  
  // Relations
  referredUser      User?    @relation(name: "referredUser", fields: [referredUserId], references: [id], onDelete: SetNull)
  affiliate         AffiliateUser @relation(fields: [affiliateId], references: [id])
  affiliateId       String   @db.Uuid  // Added @db.Uuid
  program           AffiliateProgram @relation(fields: [programId], references: [id])
  programId         String   @db.Uuid  // Added @db.Uuid
  payout            AffiliatePayout? @relation(fields: [payoutId], references: [id])
  payoutId          String?  @db.Uuid  // Added @db.Uuid
}

model AffiliateClick {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ipAddress         String?
  userAgent         String?
  referrer          String?
  timestamp         DateTime @default(now())
  converted         Boolean  @default(false)
  
  // Relations
  affiliate         AffiliateUser @relation(fields: [affiliateId], references: [id])
  affiliateId       String   @db.Uuid  // Added @db.Uuid
}

model AffiliatePayout {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount            Float
  status            String   @default("pending") // pending, processing, completed, failed
  paymentMethod     String   // paypal, bank_transfer, etc.
  transactionId     String?
  notes             String?
  processedAt       DateTime?
  createdAt         DateTime @default(now())
  
  // Relations
  affiliate         AffiliateUser @relation(fields: [affiliateId], references: [id])
  affiliateId       String   @db.Uuid  // Added @db.Uuid
  program           AffiliateProgram @relation(fields: [programId], references: [id])
  programId         String   @db.Uuid  // Added @db.Uuid
  referrals         AffiliateReferral[]
}


//////

// WhatsApp-specific models to add to your existing schema

model WhatsAppBusiness {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String   @db.Uuid
  businessName      String
  phoneNumber       String
  phoneNumberId     String   @unique
  wabaId            String
  accessToken       String
  refreshToken      String?
  tokenExpiresAt    DateTime
  verificationStatus String   @default("pending") // pending, verified, failed
  webhookSecret     String   @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsAppRules     WhatsAppRule[]
  whatsAppStats     WhatsAppStat[]
  whatsAppTemplates WhatsAppTemplate[]

  @@index([userId])
}

model WhatsAppRule {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  trigger      String   // keyword, new_chat, no_response, button_click, location, media, scheduled
  triggerValue String?  // comma-separated keywords or other trigger-specific values
  response     String   // The message to send
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  userId             String   @db.Uuid
  whatsappBusinessId String?  @db.Uuid

  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsappBusiness  WhatsAppBusiness? @relation(fields: [whatsappBusinessId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([whatsappBusinessId])
}

model WhatsAppTemplate {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  status     String   // approved, pending, rejected
  category   String   // MARKETING, UTILITY, AUTHENTICATION
  components Json     // Array of template components
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  userId             String   @db.Uuid
  whatsappBusinessId String?  @db.Uuid

  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsappBusiness  WhatsAppBusiness? @relation(fields: [whatsappBusinessId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([whatsappBusinessId])
}

model WhatsAppStat {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date              DateTime @default(now())
  messagesSent      Int      @default(0)
  messagesReceived  Int      @default(0)
  automationTriggered Int    @default(0)
  activeUsers       Int      @default(0)
  
  whatsappBusinessId String   @db.Uuid
  whatsappBusiness   WhatsAppBusiness @relation(fields: [whatsappBusinessId], references: [id], onDelete: Cascade)
  
  @@index([whatsappBusinessId])
  @@index([date])
}


